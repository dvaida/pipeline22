# Demo Github pipeline
name: Docker Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      - name: Lint
        run: pip install flake8 && flake8 . --extend-exclude=dist,build --show-source --statistics

      - name: Test
        run: pip install -r requirements.txt && pip install pytest && pytest -v tests/* --junitxml=test-reports/report.xml

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Runs a set of commands using the runners shell
      - name: Docker Build / Push
        run: |
          # Version / patch bump
          poetry version patch
          # Extract version
          export VERSION=$(poetry version | awk '{print $2}')
          # Cleanup and refresh deployment artefacts
          rm -Rf kubernetes/deploy && mkdir kubernetes/deploy && cp kubernetes/*.yaml kubernetes/deploy/
          # Replace version in deployment
          sed 's/__VERSION__/'$VERSION'/g' kubernetes/kustomization.yaml > kubernetes/deploy/kustomization.yaml # Replace version
          # Setup Github actions, commit the deployment artefacts
          git config user.name "GitHub Actions"
          git config user.email "<>"
          git add kubernetes/deploy && git commit -am "Version bump to $VERSION [skip ci]"
          # Docker build and push
          docker build -t ${{ secrets.DOCKER_HUB_USER }}/pipeline22:$VERSION -f docker/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USER }}/pipeline22:$VERSION
          # Git push. Will trigger deploy to Argo
          git push origin master
